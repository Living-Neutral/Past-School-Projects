// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen 
{
    static bool color;
    static int Screen_Address;
    static Array powers_of_two;

    /** Initializes the Screen. */
    function void init() 
    {
        let color = true;
        let Screen_Address = 16384;
        let powers_of_two = Array.new(16);
        let powers_of_two[0] = 1;
        let powers_of_two[1] = 2;
        let powers_of_two[2] = 4;
        let powers_of_two[3] = 8;
        let powers_of_two[4] = 16;
        let powers_of_two[5] = 32;
        let powers_of_two[6] = 64;
        let powers_of_two[7] = 128;
        let powers_of_two[8] = 256;
        let powers_of_two[9] = 512;
        let powers_of_two[10] = 1024;
        let powers_of_two[11] = 2048;
        let powers_of_two[12] = 4096;
        let powers_of_two[13] = 8192;
        let powers_of_two[14] = 16384;
        let powers_of_two[15] = powers_of_two[14] + powers_of_two[14];
        return;
    }

    function int get_Screen_Address()
    {
        return Screen_Address;
    }

    /** Erases the entire screen. */
    function void clearScreen() 
    {
        do Screen.setColor(false);
        do Screen.drawRectangle(0,0,511,255);
        do Screen.setColor(true);

        return;

    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) 
    {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) 
    {
        var int address;
        var int value;
        var int pixel_position;

        let address = Screen_Address+ (32 * y) + (x /16);
        let value = Memory.peek(address);

        // let pixel_position = x % 16 
        let pixel_position = x - ((x/16) * 16)

        if (color = true)
        {
            let value = value | powers_of_two[pixel_position];
        }

        else
        {
            let value = value & (~powers_of_two[pixel_position]);

        }

        do Memory.poke(Screen_Address, value);
        return;
        
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) 
    {
        var int a, b, difference, dx, dy, step_a,step_b;

        
        if(y1 = y2)
        {
            // if the line is only one pixel
            if(x1=x2)
            {
                do Screen.drawPixel(x1,y1)
                return;
            }

            // this means that the line is horizontal
            else
            {
                do Screen.drawHorizontalLine(x1, x2,y1)
                return;
            }
        }
         
        // if it's a vertical line
        if(x1 = x2)
        {
            do Screen.drawVerticalLine(x1,y1,y2);
            return;
        }

        dx = x2-x1;
        dy = y2-y1;

        if(dx<0)
        {
            let step_a = -1;
        }

        else
        {
            let step_a = 1;

        }

        if(dy<0)
        {
            let step_b = -1;
        }

        else
        {
            let step_b = 1;
        }

        while((Math.abs(x1+a-x2)) | (Math.abs(y1 + b - y2 ) >0))
        {
            do Screen.drawPixel();

            if(difference < 0)
            {
                let a = a + step_a;
                let difference = difference + Math.abs(dy);
            }

            else
            {
                let b = b + step_b;
                let difference = difference - Math.abs(dx);

            }

        }

        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y)
    {
        var int x, address;

        if(x1 > x2)
        {
            do Screen.drawHorizontalLine(x2, x1, y);
            return;
        }

        let x = x1;

        while((~(x>x2)))
        {

            if(((~(Math.mod(x,16)=0))) | ((x+15)>x2))
            {
                do Screen.drawPixel(x,y);
                let x = x + 1;
            }

            else
            {
                let address = Screen.get_Screen_Address(x,y);
                if(color=true)
                {
                    do Memory.poke(Screen_Address + address, -1);
                }

                else
                {
                    do Memory.poke(Screen_Address + address, 0);
                }

                let x = x + 16;

            }

        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2)
    {
        var int y;

        if(y1 > y2)
        {
            do Screen.drawVerticalLine(x,y2,y1)
        }

        let y = y1;

        while(~(y>y2))
        {
            do Screen.drawPixel(x,y);
            let y = y + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) 
    {
        var int y;

        if(y1>y2)
        {
            do Screen.drawRectangle(x2,y2,x1, y1);
            return;
        }

        let y = y1;

        while((~(y>y2)))
        {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) 
    {
        var int dy, dl;

        if(r > 181)
        {
            do Sys.error(13);
        }

        let dy = -r;

        while(~(dy > r))
        {
            let dl = Math.sqrt((r*r)-(dy * dy));
            do Screen.drawLine(x-dl,y+dy,x+dl,y+dy);
            let dy = dy + 1;
        }
        return;

    }
}
