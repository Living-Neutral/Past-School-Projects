// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array string;
    field int length;
    field int MAX_LENGTH;


    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) 
    {
        if(maxLength > 0)
        {
            let string = Array.new(maxLength);
        }

        let length = 0;
        let MAX_LENGTH = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() 
    {
        if(MAX_LENGTH>0)
        {
           do Memory.deAlloc(string);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() 
    {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) 
    {
        if(j < length)
        {
            return string[j];
        }
        
        else
        {
            return 0;
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) 
    {
        if(j<length)
        {
            let string[j] = c;
        }

        else
        {
            // do nothing
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) 
    {
        if(length<MAX_LENGTH)
        {
            let string[length] = c;
            let length = length + 1; 
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() 
    {
        
        let length = length - 1;
        return;
        
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() 
    {
        var int residual, i;
        var bool negative;
        
        if(MAX_LENGTH = 0)
        {
            return -1;
        }


        if(string[i]=45)
        {
            let negative = true;
            let i = i + 1;
        }

        while(i<length)
        {
            // checking if it's in the digit set
            if((string[i]>47) & (string[i]<58))
            {
                let residual = (residual * 10) + (string[i]-48);
            }

            else
            {
                return -1;
            }
            
            let i = i + 1;
        }

        if(negative)
        {
            let residual = -residual;
        }

        return residual;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) 
    {
        

        if(val < 0)
        {
            if(MAX_LENGTH > 0)
            {
                let string[0] = 45;
            }

            let val = -val;
            let length = 1;
            
            else
            {
                length = 0;
            }

            do intToString(val);
            return;
        }
        return;

    }

    /** Returns the new line character. */
    function char newLine() 
    {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() 
    {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() 
    {
        return 34;
    }

    method void intToString(int val)
    {
        var int last_digit, char;
        let last_digit = val-((val/10)*10);
        let char = val - ((val/10) *10);

        if(val<10)
        {
            // nothing to do if val is less than 10
        }

        else
        {
            do intToString(val/10);
        }

        if(MAX_LENGTH > length)
        {
            let string[length] = char;
            let length = length + 1;
        }

        return;

    }
}
