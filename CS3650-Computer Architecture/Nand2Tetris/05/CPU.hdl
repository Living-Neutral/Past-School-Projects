// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // fetching the instruction
    Mux16(a=instruction,b=ALUoutput,sel=instruction[15],out=Ainstruct);
    Not(in=instruction[15], out=notInstruct);
    
    // Register A
    // if instruction[15]=0, a should load value    
    Or(a=notInstruct, b=instruction[5], out=loadA);
    ARegister(in=Ainstruct, load=loadA,out=Aoutput,out[0..14]=addressM); // loading the value of value and mem address

    Mux16(a=Aoutput, b=inM, sel=instruction[12], out=AMoutput);
    
    // ALU instruction
    And(a=instruction[11], b=instruction[15], out=zx);// control bit 1
    And(a=instruction[10], b=instruction[15], out=nx);// control bit 2
    Or(a=instruction[9], b=notInstruct, out=zy);// control bit 3
    Or(a=instruction[8], b=notInstruct, out=ny); // control bit 4
    And(a=instruction[7], b=instruction[15], out=f); // control bit 5
    And(a=instruction[6], b=instruction[15], out=no); // control bit 6
    
    ALU(x=Dout, y=AMoutput, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=ALUoutput,zr=zero,ng=neg);
    
    // if instruction: write M
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // if instruction: load D
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUoutput, load=loadD, out=Dout);

    // jumping after instructions
    Or(a=zero, b=neg, out=NOTPOS);
    Not(in=NOTPOS, out=POS);

    And(a=instruction[0], b=POS, out=j3); // j3
    And(a=instruction[1], b=zero, out=j2); //j2
    And(a=instruction[2], b=neg, out=j1); // j1

    Or(a=j1,b=j2,out=j1ORj2);
    Or(a=j1ORj2,b=j3,out=j1ORj2ORj3);
    
    // load A output and inc PC when done
    And(a=j1ORj2ORj3, b=instruction[15], out=jump);
    PC(in=Aoutput, load=jump, reset=reset, inc=true, out[0..14]=pc);        
}